{
  "name": "safejson",
  "version": "0.0.3",
  "description": "Safely parse and stringify JSON using node style callbacks.",
  "main": "safejson.js",
  "scripts": {
    "test": "mocha tests/node.js"
  },
  "homepage": "https://github.com/evanshortiss/safejson",
  "repository": {
    "type": "git",
    "url": "git@github.com:evanshortiss/safejson.git"
  },
  "keywords": [
    "safe",
    "json",
    "parse",
    "stringify"
  ],
  "author": {
    "name": "Evan Shortiss",
    "email": "evanshortiss@gmail.com"
  },
  "license": "MIT",
  "readme": "safejson\n===\n\nConcise library to parse and stringify JSON without the need for try catch. Simply use the standard pattern of providing a function with parameters and a callback that takes an error as the first parameter and result as the second.\n\n## Trivial Example\n\n```\n// Valid JSON object that will stringify\nvar VALID_OBJECT = {\n  name: 'evan',\n  age: 23\n};\n\nvar VALID_JSON_STRING = JSON.stringify(VALID_OBJECT);\n\n// Invalid JSON object, has a circular reference\nvar CIRCULAR_OBJECT = {\n  name: 'evan',\n  age: 23\n};\nCIRCULAR_OBJECT.cref = CIRCULAR_OBJECT;\n\n\nvar safejson = require('safejson');\n\nsafejson.parse(VALID_JSON_STRING, function(err, json) {\n  // err is null as no error would have occured due to valid input\n  // json is a valid JSON object\n});\n\nsafejson.stringify(VALID_OBJECT, function(err, json) {\n  // err would be null as the object is valid json\n  // json is a valid json string\n});\n\nsafejson.stringify(CIRCULAR_OBJECT, function(err, str) {\n  // err would be defined as the object contained a circular reference\n  // str would equal null\n});\n```\n\n\n## Methods\n#### safejson.stringify(value[, replacer [, space]], callback)\nDoes the job of JSON.stringify but handles exceptions for you. Supports all the usual JSON.stringify parameters, including the optional *replacer* and *spaces*. The last parameter must always be a callback function and is not optional.\n\n#### safejson.parse(str[, reviver], callback)\nDoes the job of JSON.parse but handles exceptions for you. Supports all the usual JSON.parse parameters. The last parameter must always be a callback function and is not optional.\n\n\n## Tests\nTests can be run using mocha on the _tests/node.js_ file. Browser tests can be run by opening the _tests/browser/index.html_ file.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/evanshortiss/safejson/issues"
  },
  "_id": "safejson@0.0.3",
  "dist": {
    "shasum": "e6872d9414b898fb72c1f8aa45ec3d9116e88c8e"
  },
  "_from": "safejson@*",
  "_resolved": "https://registry.npmjs.org/safejson/-/safejson-0.0.3.tgz"
}
